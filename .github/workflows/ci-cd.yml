name: CI/CD Pipeline Nasjod

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  # test-and-lint:
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.12'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pytest flake8

  #     - name: Run flake8 linting
  #       run: flake8 .

  #     - name: Run pytest
  #       run: pytest
  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to get all tags
          persist-credentials: false

      - name: Install semver
        run: pip install semver

      - name: Configure Git user
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

      - name: Set up authentication for pushing tags
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        run: |
          git remote set-url origin https://x-access-token:${GHCR_PAT}@github.com/${{ github.repository }}

      - name: Set version and create tag
        id: create_release
        run: |
          # Get the current version from the latest tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${LAST_TAG#v}  # Remove the 'v' prefix

          echo "Current version: $CURRENT_VERSION"

          # Determine versioning based on commit message patterns
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MESSAGE" =~ feat! ]]; then
            VERSION_TYPE=major
          elif [[ "$COMMIT_MESSAGE" =~ feat ]]; then
            VERSION_TYPE=minor
          else
            VERSION_TYPE=patch
          fi

          echo "Version bump type: $VERSION_TYPE"

          # Increment the version number
          NEW_VERSION=$(python3 -c "import semver; print(semver.VersionInfo.parse('$CURRENT_VERSION').bump_$VERSION_TYPE())")

          echo "New version: $NEW_VERSION"

          # Tag the new version
          git tag -a "v$NEW_VERSION" -m "Release version v$NEW_VERSION"

          # Push the new tag
          git push origin "v$NEW_VERSION"

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.NEW_VERSION }}"
          name: "v${{ env.NEW_VERSION }}"
          body: "Automated release for version v${{ env.NEW_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_PAT }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/nasjod-api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Deploy to VPS
        env:
          SSH_KEY: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.VPS_SSH_USER }}
          SSH_HOST: ${{ secrets.VPS_SSH_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST << 'EOF'
            cd /opt/projects/nasjod
            docker-compose pull
            docker-compose up -d
          EOF

# Generated by Django 5.0 on 2024-10-21 14:26

import core._helpers
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("consent_given", models.BooleanField(default=False)),
                ("is_subscribed_to_newsletter", models.BooleanField(default=False)),
                (
                    "is_subscribed_to_marketing_emails",
                    models.BooleanField(default=False),
                ),
                ("is_subscribed_to_marketing_sms", models.BooleanField(default=False)),
                (
                    "is_subscribed_to_marketing_push_notification",
                    models.BooleanField(default=False),
                ),
                ("consent_for_data_enrichment", models.BooleanField(default=False)),
                ("consent_for_personalization", models.BooleanField(default=False)),
                ("consent_for_third_party_sharing", models.BooleanField(default=False)),
                ("username", models.CharField(blank=True, default="", max_length=50)),
                (
                    "identifier",
                    models.CharField(default=uuid.uuid4, editable=False, max_length=50),
                ),
                ("email", models.EmailField(max_length=255, unique=True)),
                (
                    "sex",
                    models.CharField(
                        choices=[("Male", "male"), ("Female", "female")],
                        max_length=30,
                        null=True,
                    ),
                ),
                ("birth_date", models.DateField(null=True)),
                ("first_name", models.CharField(blank=True, max_length=50)),
                ("last_name", models.CharField(blank=True, max_length=50)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=20, null=True, unique=True),
                ),
                ("is_active", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "photo",
                    models.ImageField(
                        blank=True, null=True, upload_to=core._helpers.image_path_upload
                    ),
                ),
                (
                    "address",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="address_user",
                        to="core.address",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
